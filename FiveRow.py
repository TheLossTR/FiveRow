import logging
import random
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BOARD_SIZE = 15
EMPTY = 0
BLACK = 1  # –ò–≥—Ä–æ–∫
WHITE = 2  # –ò–ò
MAX_DEPTH = 3  # –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ò–ò

# –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
PATTERN_WEIGHTS = {
    'five': 100000,  # 5 –≤ —Ä—è–¥
    'open_four': 10000,  # –æ—Ç–∫—Ä—ã—Ç–∞—è —á–µ—Ç–≤–µ—Ä–∫–∞
    'four': 1000,  # —á–µ—Ç–≤–µ—Ä–∫–∞
    'open_three': 1000,  # –æ—Ç–∫—Ä—ã—Ç–∞—è —Ç—Ä–æ–π–∫–∞
    'three': 100,  # —Ç—Ä–æ–π–∫–∞
    'open_two': 10,  # –æ—Ç–∫—Ä—ã—Ç–∞—è –¥–≤–æ–π–∫–∞
    'two': 1  # –¥–≤–æ–π–∫–∞
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä
games = {}


def init_board():
    return [[EMPTY for _ in range(BOARD_SIZE)] for _ in range(BOARD_SIZE)]


def check_win(board, row, col, player):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    directions = [
        [(0, 1), (0, -1)],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
        [(1, 0), (-1, 0)],  # –≤–µ—Ä—Ç–∏–∫–∞–ª—å
        [(1, 1), (-1, -1)],  # –¥–∏–∞–≥–æ–Ω–∞–ª \
        [(1, -1), (-1, 1)]  # –¥–∏–∞–≥–æ–Ω–∞–ª /
    ]

    for dir_pair in directions:
        count = 1
        for dr, dc in dir_pair:
            r, c = row + dr, col + dc
            while 0 <= r < BOARD_SIZE and 0 <= c < BOARD_SIZE and board[r][c] == player:
                count += 1
                r += dr
                c += dc
        if count >= 5:
            return True
    return False


def is_valid_move(board, row, col):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ö–æ–¥–∞
    return (0 <= row < BOARD_SIZE and
            0 <= col < BOARD_SIZE and
            board[row][col] == EMPTY)


def get_empty_cells_around(board, center_row, center_col, radius=2):
    # –ü–æ–ª—É—á–∏—Ç—å –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ –≤–æ–∫—Ä—É–≥ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    cells = []
    for dr in range(-radius, radius + 1):
        for dc in range(-radius, radius + 1):
            r, c = center_row + dr, center_col + dc
            if (0 <= r < BOARD_SIZE and 0 <= c < BOARD_SIZE and
                    board[r][c] == EMPTY and (dr != 0 or dc != 0)):
                cells.append((r, c))
    return cells


def evaluate_position(board, player):
    # –û—Ü–µ–Ω–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    score = 0
    opponent = WHITE if player == BLACK else BLACK

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª–∏–Ω–æ–π 5
    for row in range(BOARD_SIZE):
        for col in range(BOARD_SIZE):
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
            if col <= BOARD_SIZE - 5:
                line = [board[row][col + i] for i in range(5)]
                score += evaluate_line(line, player, opponent)

            # –í–µ—Ä—Ç–∏–∫–∞–ª—å
            if row <= BOARD_SIZE - 5:
                line = [board[row + i][col] for i in range(5)]
                score += evaluate_line(line, player, opponent)

            # –î–∏–∞–≥–æ–Ω–∞–ª \
            if row <= BOARD_SIZE - 5 and col <= BOARD_SIZE - 5:
                line = [board[row + i][col + i] for i in range(5)]
                score += evaluate_line(line, player, opponent)

            # –î–∏–∞–≥–æ–Ω–∞–ª /
            if row <= BOARD_SIZE - 5 and col >= 4:
                line = [board[row + i][col - i] for i in range(5)]
                score += evaluate_line(line, player, opponent)

    return score


def evaluate_line(line, player, opponent):
    # –û—Ü–µ–Ω–∫–∞ –ª–∏–Ω–∏–∏ –∏–∑ 5 –∫–ª–µ—Ç–æ–∫
    player_count = line.count(player)
    opponent_count = line.count(opponent)

    if opponent_count > 0 and player_count > 0:
        return 0  # –°–º–µ—à–∞–Ω–Ω–∞—è –ª–∏–Ω–∏—è

    if player_count == 5:
        return PATTERN_WEIGHTS['five']
    elif player_count == 4 and line.count(EMPTY) == 1:
        return PATTERN_WEIGHTS['four']
    elif player_count == 3 and line.count(EMPTY) == 2:
        return PATTERN_WEIGHTS['three']
    elif player_count == 2 and line.count(EMPTY) == 3:
        return PATTERN_WEIGHTS['two']

    if opponent_count == 5:
        return -PATTERN_WEIGHTS['five']
    elif opponent_count == 4 and line.count(EMPTY) == 1:
        return -PATTERN_WEIGHTS['four']
    elif opponent_count == 3 and line.count(EMPTY) == 2:
        return -PATTERN_WEIGHTS['three']
    elif opponent_count == 2 and line.count(EMPTY) == 3:
        return -PATTERN_WEIGHTS['two']

    return 0


def minimax(board, depth, alpha, beta, maximizing_player, last_move=None):
    # –ê–ª–≥–æ—Ä–∏—Ç–º –º–∏–Ω–∏–º–∞–∫—Å —Å –∞–ª—å—Ñ–∞-–±–µ—Ç–∞ –æ—Ç—Å–µ—á–µ–Ω–∏–µ–º
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if last_move and check_win(board, last_move[0], last_move[1], WHITE if maximizing_player else BLACK):
        return (None, 100000) if maximizing_player else (None, -100000)

    if depth == 0:
        score = evaluate_position(board, WHITE) - evaluate_position(board, BLACK)
        return (None, score)

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ö–æ–¥—ã –≤–æ–∫—Ä—É–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞
    if last_move:
        possible_moves = get_empty_cells_around(board, last_move[0], last_move[1])
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤—Å–µ –ø—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏ —Ä—è–¥–æ–º —Å –∫–∞–º–Ω—è–º–∏
        possible_moves = []
        for row in range(BOARD_SIZE):
            for col in range(BOARD_SIZE):
                if board[row][col] != EMPTY:
                    possible_moves.extend(get_empty_cells_around(board, row, col))

        if not possible_moves:  # –ï—Å–ª–∏ –¥–æ—Å–∫–∞ –ø—É—Å—Ç–∞—è
            possible_moves = [(BOARD_SIZE // 2, BOARD_SIZE // 2)]

    if not possible_moves:
        return (None, 0)

    if maximizing_player:
        max_eval = float('-inf')
        best_move = None

        for move in possible_moves:
            row, col = move
            board[row][col] = WHITE
            evaluation = minimax(board, depth - 1, alpha, beta, False, (row, col))[1]
            board[row][col] = EMPTY

            if evaluation > max_eval:
                max_eval = evaluation
                best_move = move

            alpha = max(alpha, evaluation)
            if beta <= alpha:
                break

        return best_move, max_eval
    else:
        min_eval = float('inf')
        best_move = None

        for move in possible_moves:
            row, col = move
            board[row][col] = BLACK
            evaluation = minimax(board, depth - 1, alpha, beta, True, (row, col))[1]
            board[row][col] = EMPTY

            if evaluation < min_eval:
                min_eval = evaluation
                best_move = move

            beta = min(beta, evaluation)
            if beta <= alpha:
                break

        return best_move, min_eval


def ai_move(board, last_move):
    # –•–æ–¥ –ò–ò
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —Ö–æ–¥—ã
    for row in range(BOARD_SIZE):
        for col in range(BOARD_SIZE):
            if board[row][col] == EMPTY:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ò–ò –≤—ã–∏–≥—Ä–∞—Ç—å
                board[row][col] = WHITE
                if check_win(board, row, col, WHITE):
                    board[row][col] = EMPTY
                    return (row, col)
                board[row][col] = EMPTY

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
                board[row][col] = BLACK
                if check_win(board, row, col, BLACK):
                    board[row][col] = EMPTY
                    return (row, col)
                board[row][col] = EMPTY

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞
    move, score = minimax(board, MAX_DEPTH, float('-inf'), float('inf'), True, last_move)

    if move is None:
        # –ï—Å–ª–∏ –º–∏–Ω–∏–º–∞–∫—Å –Ω–µ –Ω–∞—à–µ–ª —Ö–æ–¥, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö
        if last_move:
            possible_moves = get_empty_cells_around(board, last_move[0], last_move[1])
        else:
            possible_moves = [(BOARD_SIZE // 2, BOARD_SIZE // 2)]

        if possible_moves:
            move = random.choice(possible_moves)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤, –∏—â–µ–º –ª—é–±—É—é –ø—É—Å—Ç—É—é –∫–ª–µ—Ç–∫—É
            for row in range(BOARD_SIZE):
                for col in range(BOARD_SIZE):
                    if board[row][col] == EMPTY:
                        return (row, col)

    return move


def board_to_str(board):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–æ—Å–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
    symbols = {EMPTY: '‚¨ú', BLACK: '‚ö´', WHITE: '‚ö™'}
    header = "    " + "   ".join([f"{i:2}" for i in range(BOARD_SIZE)])
    rows = []
    for i, row in enumerate(board):
        row_str = f"{i:2} " + "".join([symbols[cell] for cell in row])
        rows.append(row_str)
    return header + "\n" + "\n".join(rows)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    await update.message.reply_text(
        "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†—ç–Ω–¥–∑—é!\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Ä¢ –í—ã –∏–≥—Ä–∞–µ—Ç–µ —á–µ—Ä–Ω—ã–º–∏ (‚ö´), –ò–ò - –±–µ–ª—ã–º–∏ (‚ö™)\n"
        "‚Ä¢ –ò–≥—Ä–æ–∫–∏ —Ö–æ–¥—è—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏, —Å—Ç–∞–≤—è –∫–∞–º–Ω–∏ –Ω–∞ –¥–æ—Å–∫—É\n"
        "‚Ä¢ –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º —Å–æ–±–µ—Ä–µ—Ç 5 –∫–∞–º–Ω–µ–π –≤ —Ä—è–¥\n"
        "‚Ä¢ –†—è–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–º\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "/rules - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞\n"
        "–•–æ–¥ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 'x y' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '7 7')"
    )


async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rules
    await update.message.reply_text(
        "üìã –ü—Ä–∞–≤–∏–ª–∞ –†—ç–Ω–¥–∑—é:\n\n"
        "1. –ò–≥—Ä–∞ –≤–µ–¥–µ—Ç—Å—è –Ω–∞ –¥–æ—Å–∫–µ 15√ó15\n"
        "2. –ò–≥—Ä–æ–∫ (‚ö´) —Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—ã–º\n"
        "3. –ò–ò (‚ö™) —Ö–æ–¥–∏—Ç –≤—Ç–æ—Ä—ã–º\n"
        "4. –ö–∞–º–Ω–∏ —Å—Ç–∞–≤—è—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ª–∏–Ω–∏–π\n"
        "5. –ü–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –ø–æ—Å—Ç—Ä–æ–∏—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä—è–¥ –∏–∑ 5 —Å–≤–æ–∏—Ö –∫–∞–º–Ω–µ–π\n"
        "6. –†—è–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –∏–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–º\n"
        "7. –ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ —Ä—è–¥–∞ –∏–∑ 5 –∫–∞–º–Ω–µ–π –∏–ª–∏ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ—Å–∫–∏"
    )


async def new_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    chat_id = update.effective_chat.id
    games[chat_id] = {
        'board': init_board(),
        'last_move': None,
        'game_over': False
    }
    await update.message.reply_text(
        "üÜï –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à —Ö–æ–¥ (—á–µ—Ä–Ω—ã–µ ‚ö´).\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'x y' (–æ—Ç 0 –¥–æ 14).\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–µ—Ä–≤—ã–π —Ö–æ–¥: '7 7' (—Ü–µ–Ω—Ç—Ä –¥–æ—Å–∫–∏)\n\n" +
        board_to_str(games[chat_id]['board'])
    )


async def make_move(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    chat_id = update.effective_chat.id
    if chat_id not in games:
        await update.message.reply_text("–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /new")
        return

    game = games[chat_id]
    if game['game_over']:
        await update.message.reply_text("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /new")
        return

    try:
        x, y = map(int, update.message.text.split())
        if not (0 <= x < BOARD_SIZE and 0 <= y < BOARD_SIZE):
            raise ValueError("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 'x y' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '7 7')")
        return

    if not is_valid_move(game['board'], y, x):
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        return

    # –•–æ–¥ –∏–≥—Ä–æ–∫–∞
    game['board'][y][x] = BLACK
    game['last_move'] = (y, x)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –∏–≥—Ä–æ–∫–∞
    if check_win(game['board'], y, x, BLACK):
        game['game_over'] = True
        await update.message.reply_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!\n\n" +
            board_to_str(game['board']) +
            "\n\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É: /new"
        )
        return

    # –•–æ–¥ –ò–ò
    await update.message.reply_text("ü§î –ò–ò –¥—É–º–∞–µ—Ç...")
    ai_row, ai_col = ai_move(game['board'], game['last_move'])
    game['board'][ai_row][ai_col] = WHITE
    game['last_move'] = (ai_row, ai_col)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã –ò–ò
    if check_win(game['board'], ai_row, ai_col, WHITE):
        game['game_over'] = True
        await update.message.reply_text(
            "ü§ñ –ò–ò –ø–æ–±–µ–¥–∏–ª! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n\n" +
            board_to_str(game['board']) +
            "\n\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É: /new"
        )
        return

    # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã
    await update.message.reply_text(
        f"ü§ñ –ò–ò –ø–æ—Ö–æ–¥–∏–ª –≤ –ø–æ–∑–∏—Ü–∏—é ({ai_col}, {ai_row})\n"
        f"–í–∞—à —Ö–æ–¥ (—á–µ—Ä–Ω—ã–µ ‚ö´):\n\n" +
        board_to_str(game['board'])
    )


def main():
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    # –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    application = Application.builder().token("YOUR_BOT_TOKEN").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("new", new_game))
    application.add_handler(CommandHandler("rules", show_rules))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, make_move))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
